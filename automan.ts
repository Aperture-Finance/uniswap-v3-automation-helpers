import {
  ApertureSupportedChainId,
  INonfungiblePositionManager,
  IUniV3Automan__factory,
  PermitInfo,
  UniV3Automan,
} from '@aperture_finance/uniswap-v3-automation-sdk';
import { JsonRpcProvider, Provider } from '@ethersproject/providers';
import { FeeAmount, TICK_SPACINGS, nearestUsableTick } from '@uniswap/v3-sdk';
import { BigNumberish, BytesLike, Signer } from 'ethers';
import { solidityPack, splitSignature } from 'ethers/lib/utils';

import { getChainInfo } from './chain';
import {
  getAutomanWhitelistOverrides,
  getTokenOverrides,
  staticCallWithOverrides,
} from './overrides';

export type AutomanActionName =
  | 'decreaseLiquidity'
  | 'reinvest'
  | 'rebalance'
  | 'removeLiquidity(';
export type AutomanFragment = {
  [K in keyof UniV3Automan['functions']]: K extends `${AutomanActionName}${string}`
    ? K
    : never;
}[keyof UniV3Automan['functions']];

export type GetAutomanFragment<T extends AutomanActionName> = {
  [P in AutomanFragment]: P extends `${T}${string}` ? P : never;
}[AutomanFragment];

export type GetAutomanParams<T extends AutomanFragment> = Parameters<
  UniV3Automan['functions'][T]
>;

type AutomanCallInfo<T extends AutomanActionName> = {
  functionFragment: GetAutomanFragment<T>;
  data: string;
};

type UnwrapPromise<T> = T extends Promise<infer U> ? U : T;

type MintReturnType = UnwrapPromise<
  ReturnType<UniV3Automan['callStatic']['mintOptimal']>
>;

type RemoveLiquidityReturnType = UnwrapPromise<
  ReturnType<UniV3Automan['callStatic'][GetAutomanFragment<'removeLiquidity('>]>
>;

type RebalanceReturnType = UnwrapPromise<
  ReturnType<UniV3Automan['callStatic'][GetAutomanFragment<'rebalance'>]>
>;

export function getAutomanContract(
  chainId: ApertureSupportedChainId,
  provider: Provider | Signer,
) {
  return IUniV3Automan__factory.connect(
    getChainInfo(chainId).aperture_uniswap_v3_automan,
    provider,
  );
}

export function encodeSwapData(
  chainId: ApertureSupportedChainId,
  router: string,
  approveTarget: string,
  tokenIn: string,
  tokenOut: string,
  amountIn: BigNumberish,
  data: BytesLike,
): string {
  return solidityPack(
    ['address', 'bytes'],
    [
      getChainInfo(chainId).aperture_router_proxy!,
      solidityPack(
        ['address', 'address', 'address', 'address', 'uint256', 'bytes'],
        [router, approveTarget, tokenIn, tokenOut, amountIn, data],
      ),
    ],
  );
}

export function encodeOptimalSwapData(
  chainId: ApertureSupportedChainId,
  token0: string,
  token1: string,
  fee: FeeAmount,
  tickLower: number,
  tickUpper: number,
  zeroForOne: boolean,
  approveTarget: string,
  router: string,
  data: BytesLike,
): string {
  return solidityPack(
    ['address', 'bytes'],
    [
      getChainInfo(chainId).aperture_router_proxy!,
      solidityPack(
        // prettier-ignore
        ['address', 'address', 'uint24', 'int24', 'int24', 'bool', 'address', 'address', 'bytes'],
        // prettier-ignore
        [token0, token1, fee, tickLower, tickUpper, zeroForOne, approveTarget, router, data],
      ),
    ],
  );
}

export function getAutomanRebalanceCallInfo(
  mintParams: INonfungiblePositionManager.MintParamsStruct,
  existingPositionId: BigNumberish,
  feeBips: BigNumberish = 0,
  permitInfo?: PermitInfo,
  swapData: BytesLike = '0x',
): AutomanCallInfo<'rebalance'> {
  if (permitInfo === undefined) {
    const functionFragment =
      'rebalance((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256),uint256,uint256,bytes)';
    return {
      functionFragment,
      data: IUniV3Automan__factory.createInterface().encodeFunctionData(
        functionFragment,
        [mintParams, existingPositionId, feeBips, swapData],
      ),
    };
  }
  const permitSignature = splitSignature(permitInfo.signature);
  const functionFragment =
    'rebalance((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256),uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)';
  return {
    functionFragment,
    data: IUniV3Automan__factory.createInterface().encodeFunctionData(
      functionFragment,
      [
        mintParams,
        existingPositionId,
        feeBips,
        swapData,
        permitInfo.deadline,
        permitSignature.v,
        permitSignature.r,
        permitSignature.s,
      ],
    ),
  };
}

export function getAutomanReinvestCallInfo(
  positionId: BigNumberish,
  deadline: BigNumberish,
  amount0Min: BigNumberish = 0,
  amount1Min: BigNumberish = 0,
  feeBips: BigNumberish = 0,
  permitInfo?: PermitInfo,
  swapData: BytesLike = '0x',
): AutomanCallInfo<'reinvest'> {
  const increaseLiquidityParams: INonfungiblePositionManager.IncreaseLiquidityParamsStruct =
    {
      tokenId: positionId,
      amount0Desired: 0, // Param value ignored by Automan.
      amount1Desired: 0, // Param value ignored by Automan.
      amount0Min,
      amount1Min,
      deadline,
    };
  if (permitInfo === undefined) {
    const functionFragment =
      'reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,bytes)';
    return {
      functionFragment,
      data: IUniV3Automan__factory.createInterface().encodeFunctionData(
        functionFragment,
        [increaseLiquidityParams, feeBips, swapData],
      ),
    };
  }
  const permitSignature = splitSignature(permitInfo.signature);
  const functionFragment =
    'reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,bytes,uint256,uint8,bytes32,bytes32)';
  return {
    functionFragment,
    data: IUniV3Automan__factory.createInterface().encodeFunctionData(
      functionFragment,
      [
        increaseLiquidityParams,
        feeBips,
        swapData,
        permitInfo.deadline,
        permitSignature.v,
        permitSignature.r,
        permitSignature.s,
      ],
    ),
  };
}

export function getAutomanRemoveLiquidityCallInfo(
  tokenId: BigNumberish,
  deadline: BigNumberish,
  amount0Min: BigNumberish = 0,
  amount1Min: BigNumberish = 0,
  feeBips: BigNumberish = 0,
  permitInfo?: PermitInfo,
): AutomanCallInfo<'removeLiquidity('> {
  const decreaseLiquidityParams: INonfungiblePositionManager.DecreaseLiquidityParamsStruct =
    {
      tokenId,
      liquidity: 0, // Param value ignored by Automan.
      amount0Min,
      amount1Min,
      deadline,
    };
  if (permitInfo === undefined) {
    const functionFragment =
      'removeLiquidity((uint256,uint128,uint256,uint256,uint256),uint256)';
    return {
      functionFragment,
      data: IUniV3Automan__factory.createInterface().encodeFunctionData(
        functionFragment,
        [decreaseLiquidityParams, feeBips],
      ),
    };
  }
  const permitSignature = splitSignature(permitInfo.signature);
  const functionFragment =
    'removeLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,uint8,bytes32,bytes32)';
  return {
    functionFragment,
    data: IUniV3Automan__factory.createInterface().encodeFunctionData(
      functionFragment,
      [
        decreaseLiquidityParams,
        feeBips,
        permitInfo.deadline,
        permitSignature.v,
        permitSignature.r,
        permitSignature.s,
      ],
    ),
  };
}

/**
 * Simulate a `mintOptimal` call by overriding the balances and allowances of the tokens involved.
 * @param chainId The chain ID.
 * @param provider The Ethers provider.
 * @param from The address to simulate the call from.
 * @param mintParams The mint parameters.
 * @param swapData The swap data if using a router.
 * @param blockNumber Optional block number to query.
 * @returns {tokenId, liquidity, amount0, amount1}
 */
export async function simulateMintOptimal(
  chainId: ApertureSupportedChainId,
  provider: JsonRpcProvider,
  from: string,
  mintParams: INonfungiblePositionManager.MintParamsStruct,
  swapData: BytesLike = '0x',
  blockNumber?: number,
): Promise<MintReturnType> {
  const tickLower = Number(mintParams.tickLower.toString());
  const tickUpper = Number(mintParams.tickUpper.toString());
  const fee = mintParams.fee as FeeAmount;
  if (
    tickLower !== nearestUsableTick(tickLower, TICK_SPACINGS[fee]) ||
    tickUpper !== nearestUsableTick(tickUpper, TICK_SPACINGS[fee])
  ) {
    throw new Error('tickLower or tickUpper not valid');
  }
  const data = IUniV3Automan__factory.createInterface().encodeFunctionData(
    'mintOptimal',
    [mintParams, swapData],
  );
  const { aperture_uniswap_v3_automan, aperture_router_proxy } =
    getChainInfo(chainId);
  const returnData = await staticCallWithOverrides(
    {
      from,
      to: aperture_uniswap_v3_automan,
      data,
    },
    // forge token approvals and balances
    {
      ...(aperture_router_proxy
        ? {
            [aperture_router_proxy]: {
              code: '0x6080604052600436106100435760003560e01c80634aa4a4fc146102f45780637f1e9ef614610344578063c45a015514610378578063fa461e33146103ac57610093565b3661009357336001600160a01b037f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc216146100915760405163178e51ad60e11b815260040160405180910390fd5b005b34801561009f57600080fd5b50600035606090811c90601435811c9060313560f81c90603235811c90604635901c605a60591936018415158688180286186100fb33306100e96001600160a01b038516836103cc565b6001600160a01b0385169291906103fc565b6101116001600160a01b03821686600019610450565b6040518284823760008084836000895af1610130573d6000803e3d6000fd5b506101466001600160a01b038216866000610450565b5050505050600061016930856001600160a01b03166103cc90919063ffffffff16565b905060006101806001600160a01b038516306103cc565b604080516060810182526001600160a01b0380891682528716602082015260283560e890811c928201839052929350600092839291602b35821d91602e35901d90846102367f0000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f984836040805160ff60a01b9390931760005260609091206020527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5481526055600b209190526001600160a01b031690565b90506000808b15610260578a91506102576001600160a01b038e16336103cc565b8a01905061027b565b6102736001600160a01b038f16336103cc565b8b0191508990505b6102888387878585610496565b509d5090995061029c905084848b8f6107bc565b97505050505050505081600003858183180280831886019550808218850194505050836000146102da576102da6001600160a01b0388163386610834565b8215610091576100916001600160a01b0387163385610834565b34801561030057600080fd5b506103287f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6040516001600160a01b03909116815260200160405180910390f35b34801561035057600080fd5b506103287f000000000000000000000000c36442b4a4522e871399cd717abdd847ab11fe8881565b34801561038457600080fd5b506103287f0000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f98481565b3480156103b857600080fd5b506100916103c73660046119d8565b610870565b6370a0823160e01b6000818152600483905290602082602481875afa6103f157600080fd5b505060005192915050565b60405181606052826040528360601b602c526323b872dd60601b600c52602060006064601c6000895af13d15600160005114171661044257637939f4246000526004601cfd5b600060605260405250505050565b816014528060345263095ea7b360601b60005260206000604460106000875af13d15600160005114171661048c57633e3f8f736000526004601cfd5b6000603452505050565b6000808080851580156104a7575084155b156104bd575060009250829150819050806107b0565b8660020b8860020b1215806104d95750620d89e719600289900b125b806104ea5750620d89e8600288900b135b15610508576040516330673a1b60e01b815260040160405180910390fd5b883b600081900361052c576040516301ac05a560e01b815260040160405180910390fd5b5061058b60405180610120016040528060006001600160801b0316815260200160008152602001600060020b81526020016000815260200160008152602001600081526020016000815260200160008152602001600060020b81525090565b600061059f8b6001600160a01b03166108d6565b60408401529250600090506105bc6001600160a01b038c16610908565b905060006105d28c6001600160a01b0316610932565b62ffffff16905060006105ed8d6001600160a01b0316610952565b9284525060208301849052606083018990526080830188905260e0830152610100820152600061062060028b900b610972565b905060006106308a60020b610972565b90508160a08401528060c08401526106668989866001600160a01b0316856001600160a01b0316856001600160a01b0316610c57565b94506106748c848688610c90565b8251602084015160608501516080860151881561071e57846001600160a01b0316836001600160a01b0316116106dd576106ad87610de5565b97506106d28760e00151620f424003620f42406106cd8b87896001610ee2565b020490565b828e03019a50610706565b8c9a5061070383856106fc858b60e00151620f424003620f4240610f57565b6001610f6e565b97505b6107138884866000611043565b8c82030199506107a8565b856001600160a01b0316836001600160a01b03161061076b5761074087611094565b97506107608760e00151620f424003620f42406106cd868c896001611043565b818d03019a50610794565b8b9a50610791838561078a848b60e00151620f424003620f4240610f57565b6001611195565b97505b6107a18389866000610ee2565b8d83030199505b505050505050505b95509550955095915050565b6000821561082c57601f1985018051606082529073fffd8963efd1fc6a506488495d951d5263988d2573fffd8963efd1fc6a506488495d951d53639afb818502186000806108176001600160a01b038a1630898b8789611258565b95909452505050908118831515021860000390505b949350505050565b816014528060345263a9059cbb60601b60005260206000604460106000875af13d15600160005114171661048c576390b8ec186000526004601cfd5b600061089d7f0000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f98484846112d6565b905060008513156108bc5782356108b6813084896112fa565b506108cf565b60208301356108cd813084886112fa565b505b5050505050565b633850c7bd60e01b6000818152908190604082600481875afa6108f857600080fd5b6000519250602051915050915091565b630d34328160e11b600081815290602082600481865afa61092857600080fd5b5050600051919050565b63ddca3f4360e01b600081815290602082600481865afa61092857600080fd5b6334324e9f60e21b600081815290602082600481865afa61092857600080fd5b6000600282900b818112820380820118620d89e88111156109a5576308c379a0600052602080526101546041526045601cfd5b7ffffcb933bd6fad37aa2d162d1a594001000000000000000000000000000000006080600783901b161c7001ffffffffffffffffffffffffffffffff166002821615610a01576ffff97272373d413259a46990580e213a0260801c5b6004821615610a20576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610a3f576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610a5e576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610a7d576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610a9c576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610abb576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610adb576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610afb576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610b1b576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610b3b576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610b5b576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610b7b576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610b9b576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610bbb576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610bdc576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610bfc576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610c1b576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610c38576b048a170391f7dc42444e8fa20260801c5b6000831315610c4657600019045b63ffffffff0160201c949350505050565b6000828411610c6857506000610c87565b818410610c7757506001610c87565b610c8486868686866113e7565b90505b95945050505050565b6000617fff19815b610caf878760400151886101000151878686611417565b919450925090506000610cc5600285900b610972565b90506000808615610d0857610ced8960200151848b600001518c606001518d60e00151611626565b60608c015160808d0151939b50919091039350019050610d3a565b610d258960200151848b600001518c608001518d60e00151611626565b60608c015160808d0151939b50019350900390505b826001600160a01b0316886001600160a01b031614610d5b57505050610ddc565b861515610d7c83838b6001600160a01b03168d60a001518e60c00151610c57565b151503610dca576000610d986001600160a01b038c16886116e1565b905080886000031888019050808a51018a528860208b015287870360408b01528260608b01528160808b015250610dd2565b505050610ddc565b5050506001610c98575b50505050505050565b8051602082015160a083015160c084015160e08501516060808701516000969182901b848104620f4240858103808a0291909302048301908103978997889791969094919390929091808b1015610e445763202368086000526004601cfd5b50610e4f8186611714565b83870283900401985060009050610e668688611714565b60808d0151019050610e8e82620f4240870281610e8557610e85611a58565b88919004611714565b81039750610ea181600160601b86610f57565b89039850508860011b98508660011b96505050505050600083610ec984870286870201611752565b0160601b94909404818118908211021895945050505050565b838310848418029384189390921891600084610efd57600080fd5b606083901b600160601b600160e01b031660006001600160a01b038781169087160390506000610f378383896001600160a01b0316610f57565b9050846000888486098a8406171116888204019350505050949350505050565b6000610f648484846117ea565b90505b9392505050565b600082600003610f7f57508361082c565b600160601b600160e01b03606085901b168215611003576001600160a01b0386168481029085820403610fd657818101828110610fd457610fca83896001600160a01b031683611899565b935050505061082c565b505b50610ffb610fef856001600160a01b0389168404611a6e565b80830615159083040190565b91505061082c565b600086850280831188878304141661101a57600080fd5b8203905061103a611035836001600160a01b038a1684611899565b6118a6565b9250505061082c565b83831084841802938418939092189160006001600160a01b0380861690851603600160601b61107b6001600160801b03861683611714565b9250836000828488091116830192505050949350505050565b8051602082015160a083015160c084015160e0850151606080870151600096620f42408481038087029483901b918202949094049088900490920191820396889687969195929490939192916110ea8186611714565b985081868402048903985050600061110f8288620f42400281610e8557610e85611a58565b60808d015190810191506111238787611714565b820398508089101561113d5763202368086000526004601cfd5b60c08d0151611153908390600160601b90610f57565b8a03995050508860011b98508660011b9650505050505060008361117c84870286870201611752565b0160601b94909405818118908210021895945050505050565b600081156111f45760006001600160a01b038411156111cb576111c684600160601b876001600160801b0316610f57565b6111dc565b6001600160801b038516606085901b045b9050610ffb611035826001600160a01b038916611a6e565b60006001600160a01b038411156112225761121d84600160601b876001600160801b0316611899565b61123f565b61123f606085901b6001600160801b038716808204910615150190565b905080861161124d57600080fd5b909403949350505050565b600080600063128acb0860e01b905060405181815288600482015287602482015286604482015285606482015260a0608482015260208551018060a48301828860045afa50604060008260a4018460008f5af160403d14166112be573d6000803e3d6000fd5b50506000519250602051915050965096945050505050565b60006112e38484846118c1565b9050336001600160a01b03821614610f6757600080fd5b7f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b0316846001600160a01b031614801561133a57503415155b156113a35734811461135f5760405163a11a990f60e01b815260040160405180910390fd5b6113926001600160a01b037f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21682611920565b6001600160a01b03821630146113e1575b306001600160a01b038416036113cc576113c76001600160a01b0385168383610834565b6113e1565b6113e16001600160a01b0385168484846103fc565b50505050565b60006113f68585840384610f57565b61140c8486036114068988611714565b90611714565b119695505050505050565b60008080868807811387890503818080891561152757600884901d955060ff84169250600189810b9087900b146114605761145b6001600160a01b038e1687611943565b611462565b875b945060001960018481011b01851691505b8160000361149f57600019909501946114956001600160a01b038e1687611943565b9450849150611473565b611520827e09010a0d15021d0b0e10121619031e080c141c0f111807131b17061a05041f6307c4acdd60e01b6001600160801b03831160071b83811c67ffffffffffffffff1060061b1783811c63ffffffff1060051b1792831c600181901c17600281901c17600481901c17600881901c17601081901c170260fb1c1a1790565b905061160c565b6001938401600881901d96509360ff8516935089810b9087900b1461155e576115596001600160a01b038e1687611943565b611560565b875b94506000196001841b0119851691505b8160000361159b576001909501946115916001600160a01b038e1687611943565b9450849150611570565b611609827e011c021d0e18031e16140f191104081f1b0d17151310071a0c12060b050a0960008290039091166001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1790811c63077cb53160e01b0260fb1c9190911a1790565b90505b8a818760081b010296505050505096509650969350505050565b600080806001600160a01b03878116908916101581620f4240869003905060006116548883620f4240610f57565b90508261166d576116688b8b8b6001611043565b61167a565b61167a8a8c8b6001610ee2565b945084811061169b5789955061169485620f424084611899565b94506116ad565b8794506116aa8b8a838661196b565b95505b826116c4576116bf8b878b6000610ee2565b6116d1565b6116d1868c8b6000611043565b9350505050955095509592505050565b63f30dba9360e01b6000818152600283900b60045290604082602481875afa61170957600080fd5b505060205192915050565b600082820260001983850981811082019003600160601b811061173f5763ae47f7026000526004601cfd5b8060a01b8260601c179250505092915050565b60006117e48270ffffffffffffffffffffffffffffffffff811160071b81811c68ffffffffffffffffff1060061b1781811c64ffffffffff1060051b1781811c62ffffff1060041b1781811c620100000160b5600192831c1b0260121c80830401811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c908190048111900390565b92915050565b6000838302600019848609818110820190038061181f57836118145763ae47f7026000526004601cfd5b508290049050610f67565b8084116118345763ae47f7026000526004601cfd5b838587096000858103861695869004956003870260029081188089028203028089028203028089028203028089028203028089028203028089029091030291819003819004600101858411909403939093029190930391909104170290509392505050565b6000610f648484846119a0565b806001600160a01b03811681146118bc57600080fd5b919050565b6000604051606084600037606060002060ff60a01b861760005280602052507fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b546040526001600160a01b036055600b2016915080604052509392505050565b630d0e30db60e41b60008181528060048185875af161193e57600080fd5b505050565b63299ce14b60e11b6000818152600183900b60045290602082602481875afa6103f157600080fd5b600083158515171561197c57600080fd5b816119935761198e8585856001611195565b610c87565b610c878585856001610f6e565b60006119ad8484846117ea565b90508183850915610f6757600181016119ce5763ae47f7026000526004601cfd5b6001019392505050565b600080600080606085870312156119ee57600080fd5b8435935060208501359250604085013567ffffffffffffffff80821115611a1457600080fd5b818701915087601f830112611a2857600080fd5b813581811115611a3757600080fd5b886020828501011115611a4957600080fd5b95989497505060200194505050565b634e487b7160e01b600052601260045260246000fd5b808201808211156117e457634e487b7160e01b600052601160045260246000fdfea164736f6c6343000814000a',
            },
          }
        : {}),
      ...(aperture_router_proxy ? getAutomanWhitelistOverrides(chainId) : {}),
      ...(await getTokenOverrides(
        chainId,
        provider,
        from,
        mintParams.token0,
        mintParams.token1,
        mintParams.amount0Desired,
        mintParams.amount1Desired,
      )),
    },
    provider,
    blockNumber,
  );
  return IUniV3Automan__factory.createInterface().decodeFunctionResult(
    'mintOptimal',
    returnData,
  ) as MintReturnType;
}

export async function simulateRemoveLiquidity(
  chainId: ApertureSupportedChainId,
  provider: JsonRpcProvider,
  from: string,
  tokenId: BigNumberish,
  amount0Min: BigNumberish = 0,
  amount1Min: BigNumberish = 0,
  feeBips: BigNumberish = 0,
  blockNumber?: number,
): Promise<RemoveLiquidityReturnType> {
  const { functionFragment, data } = getAutomanRemoveLiquidityCallInfo(
    tokenId,
    Math.floor(Date.now() / 1000 + 60 * 30),
    amount0Min,
    amount1Min,
    feeBips,
  );
  const returnData = await staticCallWithOverrides(
    {
      from,
      to: getChainInfo(chainId).aperture_uniswap_v3_automan,
      data,
    },
    {},
    provider,
    blockNumber,
  );
  return IUniV3Automan__factory.createInterface().decodeFunctionResult(
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    functionFragment,
    returnData,
  ) as RemoveLiquidityReturnType;
}

export async function simulateRebalance(
  chainId: ApertureSupportedChainId,
  provider: JsonRpcProvider,
  from: string,
  mintParams: INonfungiblePositionManager.MintParamsStruct,
  tokenId: BigNumberish,
  feeBips: BigNumberish = 0,
  swapData: BytesLike = '0x',
  blockNumber?: number,
): Promise<RebalanceReturnType> {
  const { functionFragment, data } = getAutomanRebalanceCallInfo(
    mintParams,
    tokenId,
    feeBips,
    undefined,
    swapData,
  );
  const { aperture_router_proxy } = getChainInfo(chainId);
  const returnData = await staticCallWithOverrides(
    {
      from,
      to: getChainInfo(chainId).aperture_uniswap_v3_automan,
      data,
    },
    {
      ...(aperture_router_proxy
        ? {
            [aperture_router_proxy]: {
              code: '0x6080604052600436106100435760003560e01c80634aa4a4fc146102f45780637f1e9ef614610344578063c45a015514610378578063fa461e33146103ac57610093565b3661009357336001600160a01b037f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc216146100915760405163178e51ad60e11b815260040160405180910390fd5b005b34801561009f57600080fd5b50600035606090811c90601435811c9060313560f81c90603235811c90604635901c605a60591936018415158688180286186100fb33306100e96001600160a01b038516836103cc565b6001600160a01b0385169291906103fc565b6101116001600160a01b03821686600019610450565b6040518284823760008084836000895af1610130573d6000803e3d6000fd5b506101466001600160a01b038216866000610450565b5050505050600061016930856001600160a01b03166103cc90919063ffffffff16565b905060006101806001600160a01b038516306103cc565b604080516060810182526001600160a01b0380891682528716602082015260283560e890811c928201839052929350600092839291602b35821d91602e35901d90846102367f0000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f984836040805160ff60a01b9390931760005260609091206020527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5481526055600b209190526001600160a01b031690565b90506000808b15610260578a91506102576001600160a01b038e16336103cc565b8a01905061027b565b6102736001600160a01b038f16336103cc565b8b0191508990505b6102888387878585610496565b509d5090995061029c905084848b8f6107bc565b97505050505050505081600003858183180280831886019550808218850194505050836000146102da576102da6001600160a01b0388163386610834565b8215610091576100916001600160a01b0387163385610834565b34801561030057600080fd5b506103287f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6040516001600160a01b03909116815260200160405180910390f35b34801561035057600080fd5b506103287f000000000000000000000000c36442b4a4522e871399cd717abdd847ab11fe8881565b34801561038457600080fd5b506103287f0000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f98481565b3480156103b857600080fd5b506100916103c73660046119d8565b610870565b6370a0823160e01b6000818152600483905290602082602481875afa6103f157600080fd5b505060005192915050565b60405181606052826040528360601b602c526323b872dd60601b600c52602060006064601c6000895af13d15600160005114171661044257637939f4246000526004601cfd5b600060605260405250505050565b816014528060345263095ea7b360601b60005260206000604460106000875af13d15600160005114171661048c57633e3f8f736000526004601cfd5b6000603452505050565b6000808080851580156104a7575084155b156104bd575060009250829150819050806107b0565b8660020b8860020b1215806104d95750620d89e719600289900b125b806104ea5750620d89e8600288900b135b15610508576040516330673a1b60e01b815260040160405180910390fd5b883b600081900361052c576040516301ac05a560e01b815260040160405180910390fd5b5061058b60405180610120016040528060006001600160801b0316815260200160008152602001600060020b81526020016000815260200160008152602001600081526020016000815260200160008152602001600060020b81525090565b600061059f8b6001600160a01b03166108d6565b60408401529250600090506105bc6001600160a01b038c16610908565b905060006105d28c6001600160a01b0316610932565b62ffffff16905060006105ed8d6001600160a01b0316610952565b9284525060208301849052606083018990526080830188905260e0830152610100820152600061062060028b900b610972565b905060006106308a60020b610972565b90508160a08401528060c08401526106668989866001600160a01b0316856001600160a01b0316856001600160a01b0316610c57565b94506106748c848688610c90565b8251602084015160608501516080860151881561071e57846001600160a01b0316836001600160a01b0316116106dd576106ad87610de5565b97506106d28760e00151620f424003620f42406106cd8b87896001610ee2565b020490565b828e03019a50610706565b8c9a5061070383856106fc858b60e00151620f424003620f4240610f57565b6001610f6e565b97505b6107138884866000611043565b8c82030199506107a8565b856001600160a01b0316836001600160a01b03161061076b5761074087611094565b97506107608760e00151620f424003620f42406106cd868c896001611043565b818d03019a50610794565b8b9a50610791838561078a848b60e00151620f424003620f4240610f57565b6001611195565b97505b6107a18389866000610ee2565b8d83030199505b505050505050505b95509550955095915050565b6000821561082c57601f1985018051606082529073fffd8963efd1fc6a506488495d951d5263988d2573fffd8963efd1fc6a506488495d951d53639afb818502186000806108176001600160a01b038a1630898b8789611258565b95909452505050908118831515021860000390505b949350505050565b816014528060345263a9059cbb60601b60005260206000604460106000875af13d15600160005114171661048c576390b8ec186000526004601cfd5b600061089d7f0000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f98484846112d6565b905060008513156108bc5782356108b6813084896112fa565b506108cf565b60208301356108cd813084886112fa565b505b5050505050565b633850c7bd60e01b6000818152908190604082600481875afa6108f857600080fd5b6000519250602051915050915091565b630d34328160e11b600081815290602082600481865afa61092857600080fd5b5050600051919050565b63ddca3f4360e01b600081815290602082600481865afa61092857600080fd5b6334324e9f60e21b600081815290602082600481865afa61092857600080fd5b6000600282900b818112820380820118620d89e88111156109a5576308c379a0600052602080526101546041526045601cfd5b7ffffcb933bd6fad37aa2d162d1a594001000000000000000000000000000000006080600783901b161c7001ffffffffffffffffffffffffffffffff166002821615610a01576ffff97272373d413259a46990580e213a0260801c5b6004821615610a20576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610a3f576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610a5e576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610a7d576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610a9c576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610abb576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610adb576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610afb576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610b1b576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610b3b576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610b5b576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610b7b576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610b9b576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610bbb576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610bdc576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610bfc576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610c1b576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610c38576b048a170391f7dc42444e8fa20260801c5b6000831315610c4657600019045b63ffffffff0160201c949350505050565b6000828411610c6857506000610c87565b818410610c7757506001610c87565b610c8486868686866113e7565b90505b95945050505050565b6000617fff19815b610caf878760400151886101000151878686611417565b919450925090506000610cc5600285900b610972565b90506000808615610d0857610ced8960200151848b600001518c606001518d60e00151611626565b60608c015160808d0151939b50919091039350019050610d3a565b610d258960200151848b600001518c608001518d60e00151611626565b60608c015160808d0151939b50019350900390505b826001600160a01b0316886001600160a01b031614610d5b57505050610ddc565b861515610d7c83838b6001600160a01b03168d60a001518e60c00151610c57565b151503610dca576000610d986001600160a01b038c16886116e1565b905080886000031888019050808a51018a528860208b015287870360408b01528260608b01528160808b015250610dd2565b505050610ddc565b5050506001610c98575b50505050505050565b8051602082015160a083015160c084015160e08501516060808701516000969182901b848104620f4240858103808a0291909302048301908103978997889791969094919390929091808b1015610e445763202368086000526004601cfd5b50610e4f8186611714565b83870283900401985060009050610e668688611714565b60808d0151019050610e8e82620f4240870281610e8557610e85611a58565b88919004611714565b81039750610ea181600160601b86610f57565b89039850508860011b98508660011b96505050505050600083610ec984870286870201611752565b0160601b94909404818118908211021895945050505050565b838310848418029384189390921891600084610efd57600080fd5b606083901b600160601b600160e01b031660006001600160a01b038781169087160390506000610f378383896001600160a01b0316610f57565b9050846000888486098a8406171116888204019350505050949350505050565b6000610f648484846117ea565b90505b9392505050565b600082600003610f7f57508361082c565b600160601b600160e01b03606085901b168215611003576001600160a01b0386168481029085820403610fd657818101828110610fd457610fca83896001600160a01b031683611899565b935050505061082c565b505b50610ffb610fef856001600160a01b0389168404611a6e565b80830615159083040190565b91505061082c565b600086850280831188878304141661101a57600080fd5b8203905061103a611035836001600160a01b038a1684611899565b6118a6565b9250505061082c565b83831084841802938418939092189160006001600160a01b0380861690851603600160601b61107b6001600160801b03861683611714565b9250836000828488091116830192505050949350505050565b8051602082015160a083015160c084015160e0850151606080870151600096620f42408481038087029483901b918202949094049088900490920191820396889687969195929490939192916110ea8186611714565b985081868402048903985050600061110f8288620f42400281610e8557610e85611a58565b60808d015190810191506111238787611714565b820398508089101561113d5763202368086000526004601cfd5b60c08d0151611153908390600160601b90610f57565b8a03995050508860011b98508660011b9650505050505060008361117c84870286870201611752565b0160601b94909405818118908210021895945050505050565b600081156111f45760006001600160a01b038411156111cb576111c684600160601b876001600160801b0316610f57565b6111dc565b6001600160801b038516606085901b045b9050610ffb611035826001600160a01b038916611a6e565b60006001600160a01b038411156112225761121d84600160601b876001600160801b0316611899565b61123f565b61123f606085901b6001600160801b038716808204910615150190565b905080861161124d57600080fd5b909403949350505050565b600080600063128acb0860e01b905060405181815288600482015287602482015286604482015285606482015260a0608482015260208551018060a48301828860045afa50604060008260a4018460008f5af160403d14166112be573d6000803e3d6000fd5b50506000519250602051915050965096945050505050565b60006112e38484846118c1565b9050336001600160a01b03821614610f6757600080fd5b7f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b0316846001600160a01b031614801561133a57503415155b156113a35734811461135f5760405163a11a990f60e01b815260040160405180910390fd5b6113926001600160a01b037f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21682611920565b6001600160a01b03821630146113e1575b306001600160a01b038416036113cc576113c76001600160a01b0385168383610834565b6113e1565b6113e16001600160a01b0385168484846103fc565b50505050565b60006113f68585840384610f57565b61140c8486036114068988611714565b90611714565b119695505050505050565b60008080868807811387890503818080891561152757600884901d955060ff84169250600189810b9087900b146114605761145b6001600160a01b038e1687611943565b611462565b875b945060001960018481011b01851691505b8160000361149f57600019909501946114956001600160a01b038e1687611943565b9450849150611473565b611520827e09010a0d15021d0b0e10121619031e080c141c0f111807131b17061a05041f6307c4acdd60e01b6001600160801b03831160071b83811c67ffffffffffffffff1060061b1783811c63ffffffff1060051b1792831c600181901c17600281901c17600481901c17600881901c17601081901c170260fb1c1a1790565b905061160c565b6001938401600881901d96509360ff8516935089810b9087900b1461155e576115596001600160a01b038e1687611943565b611560565b875b94506000196001841b0119851691505b8160000361159b576001909501946115916001600160a01b038e1687611943565b9450849150611570565b611609827e011c021d0e18031e16140f191104081f1b0d17151310071a0c12060b050a0960008290039091166001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1790811c63077cb53160e01b0260fb1c9190911a1790565b90505b8a818760081b010296505050505096509650969350505050565b600080806001600160a01b03878116908916101581620f4240869003905060006116548883620f4240610f57565b90508261166d576116688b8b8b6001611043565b61167a565b61167a8a8c8b6001610ee2565b945084811061169b5789955061169485620f424084611899565b94506116ad565b8794506116aa8b8a838661196b565b95505b826116c4576116bf8b878b6000610ee2565b6116d1565b6116d1868c8b6000611043565b9350505050955095509592505050565b63f30dba9360e01b6000818152600283900b60045290604082602481875afa61170957600080fd5b505060205192915050565b600082820260001983850981811082019003600160601b811061173f5763ae47f7026000526004601cfd5b8060a01b8260601c179250505092915050565b60006117e48270ffffffffffffffffffffffffffffffffff811160071b81811c68ffffffffffffffffff1060061b1781811c64ffffffffff1060051b1781811c62ffffff1060041b1781811c620100000160b5600192831c1b0260121c80830401811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c908190048111900390565b92915050565b6000838302600019848609818110820190038061181f57836118145763ae47f7026000526004601cfd5b508290049050610f67565b8084116118345763ae47f7026000526004601cfd5b838587096000858103861695869004956003870260029081188089028203028089028203028089028203028089028203028089028203028089029091030291819003819004600101858411909403939093029190930391909104170290509392505050565b6000610f648484846119a0565b806001600160a01b03811681146118bc57600080fd5b919050565b6000604051606084600037606060002060ff60a01b861760005280602052507fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b546040526001600160a01b036055600b2016915080604052509392505050565b630d0e30db60e41b60008181528060048185875af161193e57600080fd5b505050565b63299ce14b60e11b6000818152600183900b60045290602082602481875afa6103f157600080fd5b600083158515171561197c57600080fd5b816119935761198e8585856001611195565b610c87565b610c878585856001610f6e565b60006119ad8484846117ea565b90508183850915610f6757600181016119ce5763ae47f7026000526004601cfd5b6001019392505050565b600080600080606085870312156119ee57600080fd5b8435935060208501359250604085013567ffffffffffffffff80821115611a1457600080fd5b818701915087601f830112611a2857600080fd5b813581811115611a3757600080fd5b886020828501011115611a4957600080fd5b95989497505060200194505050565b634e487b7160e01b600052601260045260246000fd5b808201808211156117e457634e487b7160e01b600052601160045260246000fdfea164736f6c6343000814000a',
            },
          }
        : {}),
      ...(aperture_router_proxy ? getAutomanWhitelistOverrides(chainId) : {}),
    },
    provider,
    blockNumber,
  );
  return IUniV3Automan__factory.createInterface().decodeFunctionResult(
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    functionFragment,
    returnData,
  ) as RebalanceReturnType;
}
